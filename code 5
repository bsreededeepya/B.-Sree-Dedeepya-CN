5.#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 9876
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int main() {
    int serverSocket, clientSockets[MAX_CLIENTS];
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t clientAddrLen = sizeof(clientAddr);
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((serverSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket
    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error binding socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(serverSocket, MAX_CLIENTS) == -1) {
        perror("Error listening for connections");
        exit(EXIT_FAILURE);
    }

    printf("TCP Chat Server listening on port %d...\n", PORT);

    // Initialize client sockets array
    for (int i = 0; i < MAX_CLIENTS; ++i) {
        clientSockets[i] = 0;
    }

    // Accept incoming connections and handle chat
    while (1) {
        // Accept a connection
        int newClientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &clientAddrLen);
        if (newClientSocket == -1) {
            perror("Error accepting connection");
            continue;
        }

        printf("Accepted connection from %s\n", inet_ntoa(clientAddr.sin_addr));

        // Add the new client socket to the array
        for (int i = 0; i < MAX_CLIENTS; ++i) {
            if (clientSockets[i] == 0) {
                clientSockets[i] = newClientSocket;
                break;
            }
        }

        // Handle chat for the new client
        // Fork a new process or create a thread for each client for concurrent handling
        if (fork() == 0) {
            // Close the server socket in the child process
            close(serverSocket);

            // Receive and broadcast messages
            while (1) {
                memset(buffer, 0, BUFFER_SIZE);
                ssize_t bytesRead = recv(newClientSocket, buffer, BUFFER_SIZE, 0);
                if (bytesRead <= 0) {
                    perror("Error receiving data");
                    break;
                }

                // Broadcast the received message to all connected clients
                for (int i = 0; i < MAX_CLIENTS; ++i) {
                    if (clientSockets[i] != 0 && clientSockets[i] != newClientSocket) {
                        send(clientSockets[i], buffer, bytesRead, 0);
                    }
                }
            }

            // Close the client socket in the child process
            close(newClientSocket);
            exit(0);
        } else {
            // Close the new client socket in the parent process
            close(newClientSocket);
        }
    }

    // Close the server socket (this part of the code is not reachable in this example)
    close(serverSocket);

    return 0;
}

5.c.#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 9876
#define BUFFER_SIZE 1024

int main() {
    int clientSocket;
    struct sockaddr_in serverAddr;
    char buffer[BUFFER_SIZE];

    // Create socket
    if ((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    inet_pton(AF_INET, SERVER_IP, &(serverAddr.sin_addr));

    // Connect to the server
    if (connect(clientSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error connecting to server");
        exit(EXIT_FAILURE);
    }

    printf("Connected to TCP Chat Server at %s:%d\n", SERVER_IP, PORT);

    // Fork a new process or create a thread for receiving messages
    if (fork() == 0) {
        // Receive and print messages from the server
        while (1) {
            memset(buffer, 0, BUFFER_SIZE);
            ssize_t bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0);
            if (bytesRead <= 0) {
                perror("Error receiving data");
                break;
            }

            printf("Server: %s", buffer);
        }

        exit(0);
    }

    // Send messages to the server
    while (1) {
        printf("Enter message to send (or 'exit' to quit): ");
        fgets(buffer, BUFFER_SIZE, stdin);

        // Exit the loop if the user enters "exit"
        if (strncmp(buffer, "exit", 4) == 0) {
            break;
        }

        // Send data to the server
        send(clientSocket, buffer, strlen(buffer), 0);
    }

    // Close the client socket
    close(clientSocket);

    return 0;
}
